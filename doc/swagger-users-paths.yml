
paths:
  /api/user/current:
    get:
        summary: get data from the user associated with the token 
        tags: [User]
        parameters:
            - in: header
              name: x-token
              schema:
                type: string
                required: true
                description: user token
        responses:
            200: 
                description: return user data!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: true
                                user:
                                    type: object
                                    $ref: '#/components/schemas/UserSharedData'
            400:
                description: return error no token!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: There is no token in the request
            401:
                description: return error invalid token!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Invalid token
            404:
                description: return error not found!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: The user does not exist
            500:
                description: return internal error!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Please talk to the administrator
  /api/login:
    post:
        summary: login user 
        tags: [User]
        requestBody:
            required: true
            content: 
                application/json:
                    schema:
                        type: object
                        properties:
                            email:
                                type: string
                                example: rafaelputaro@gmail.com
                            password:
                                type: string
                                description: numbers, letters and at least one symbol
                                minLength: 6
                                example: rafa123el88*
        responses:
            202: 
                description: return user data and token!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: true
                                user:
                                    type: object
                                    $ref: '#/components/schemas/UserSharedData'
                                token:
                                    type: string
                                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI2NjJkMGMxMzRmMjA5MTk5ZDJmMjc0YTMiLCJuYW1lIjoicmFmYWVsIiwiaWF0IjoxNzE0MjUxMjUxLCJleHAiOjE3MTQyNTg0NTF9.ky8davH_RhQrscgs4k3dnLXJPB5mrdD6RVmWtv5dqUA
            400:
                description: return error "Incorrect username or password" or "Email has not been entered" or "Password has not been entered"!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: object
                                    example: The user has been blocked
            401:
                description: return error "The user has been blocked"!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: The user has been blocked
            404:
                description: return error not found!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: The user does not exist
            500:
                description: return internal error!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Please talk to the administrator
  /api/token:
    post:
        summary: returns a new token from request's token. In case of error use login
        tags: [User]
        parameters:
            - in: header
              name: x-token
              schema:
                type: string
                required: true
                description: user token
        responses:
            201: 
                description: return user token!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: true
                                token:
                                    type: string
                                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI2NjJkMGMxMzRmMjA5MTk5ZDJmMjc0YTMiLCJuYW1lIjoicmFmYWVsIiwiaWF0IjoxNzE0MjUxMjUxLCJleHAiOjE3MTQyNTg0NTF9.ky8davH_RhQrscgs4k3dnLXJPB5mrdD6RVmWtv5dqUA
            400:
                description: error when there is no token in the request!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: object
                                    example: There is no token in the request
            401:
                description: return error "The user has been blocked" or "Invalid token"!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: The user has been blocked
            404:
                description: return error when uid extracted from the token does not exist!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: The user does not exist
            500:
                description: return internal error!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Please talk to the administrator
 




  /api/user:
    post:
        summary: creates user
        tags: [User]
        parameters:
            - in: header
              name: x-token
              schema:
                type: string
                description: user token
        requestBody:
            required: true
            content: 
                application/json:
                    schema:
                        type: object
                        $ref: '#/components/schemas/User'
        responses:
            201: 
                description: return user data and token!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: true
                                user:
                                    type: object
                                    $ref: '#/components/schemas/UserSharedData'
                                token:
                                    type: string
                                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI2NjJkMGMxMzRmMjA5MTk5ZDJmMjc0YTMiLCJuYW1lIjoicmFmYWVsIiwiaWF0IjoxNzE0MjUxMjUxLCJleHAiOjE3MTQyNTg0NTF9.ky8davH_RhQrscgs4k3dnLXJPB5mrdD6RVmWtv5dqUA
            400:
                description: return error "Name is required" or "The name must be at least 5 characters" or "Email is required" or "The password must be at least 6 characters of which at least one must be a number and at least one must be a symbol" or "User lock status is required" or "There is already a user with that email"
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: object
                                    example: The name must be at least 5 characters
            401:
                description: return error "Invalid token" or "You do not have permission to create another user" or "The user does not have permission to create a new administrator"!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: "The user does not have permission to create a new administrator"
            500:
                description: return internal error!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Please talk to the administrator
  /api/user/{id}:
    put:
        summary: updates user
        tags: [User]
        parameters:
            - in: header
              name: x-token
              schema:
                type: string
                required: true
              description: user token
            - in: path
              name: id
              required: true
              schema:
                type: string
        requestBody:
            required: true
            content: 
                application/json:
                    schema:
                        type: object
                        $ref: '#/components/schemas/UserUpdateData'
        responses:
            200: 
                description: xreturn user data and token!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: true
                                user:
                                    type: object
                                    $ref: '#/components/schemas/UserSharedData'
                                token:
                                    type: string
                                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI2NjJkMGMxMzRmMjA5MTk5ZDJmMjc0YTMiLCJuYW1lIjoicmFmYWVsIiwiaWF0IjoxNzE0MjUxMjUxLCJleHAiOjE3MTQyNTg0NTF9.ky8davH_RhQrscgs4k3dnLXJPB5mrdD6RVmWtv5dqUA
            400:
                description: return error "There is no token in the request" or "The name must be at least 5 characters" or "The password must be at least 6 characters of which at least one must be a number and at least one must be a symbol" or "There is already a user with that email" or "The user cannot change their role" or "Invalidad lock state"
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: object
                                    example: The name must be at least 5 characters
            401:
                description: return error "Invalid token" or "User without role" or "You do not have the necessary access level"
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: "Invalid token"
            404:
                description: return error "The user does not exist"
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: The user does not exist
            500:
                description: return internal error!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Please talk to the administrator
    delete:
        summary: delete user
        tags: [User]
        parameters:
            - in: header
              name: x-token
              schema:
                type: string
                required: true
                description: user token
            - in: path
              name: id
              required: true
              schema:
                type: string
        responses:
            200: 
                description: xreturn user data and token!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: true                              
            400:
                description: return error "There is no token in the request" 
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: object
                                    example: There is no token in the request
            401:
                description: return error "Invalid token" or "User without role" or "You do not have the necessary access level"
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: "Invalid token"
            404:
                description: return error "The user does not exist"
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: The user does not exist
            500:
                description: return internal error!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Please talk to the administrator
  /api/users:
    get:
        summary: get all the users
        tags: [User]
        parameters:
            - in: header
              name: x-token
              schema:
                type: string
                required: true
                description: user token
        responses:
            200: 
                description: return all the users!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: true
                                users:
                                    type: array
                                    items:
                                        type: object
                                        $ref: '#/components/schemas/UserSharedData'
            400:
                description: return error "There is no token in the request"
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: object
                                    example: There is no token in the request
            401:
                description: return error "Invalid token"!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Invalid token
            500:
                description: return internal error!
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                ok:
                                    type: boolean
                                    example: false
                                msg:
                                    type: string
                                    example: Please talk to the administrator

